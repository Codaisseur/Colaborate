Recap:
1) Why would you use a loop? Write me a for & a while loop that prints your favorite food 10 times.
To iterate over a piece of code a certain amount of times and in different ways.

While-loop:

let favFood = 'pannenkoeken'
let count = 0

while (count < 10) {
  console.log(favFood)
  count++
}

For-loop:

let favFood = 'pannenkoeken'

for (let count = 0; count < 10; count++) {
  console.log(favFood)
}

2) How do I try out whether my loop is working?
Run it with node in terminal, or in the Chrome developer tools menu.

3) What are arrays? What is an ordered collection?
Arrays are ordened collections of data. You define it using Array = [arrayitem, arrayitem2, arrayitem3]. An ordened collection is a collection of datatypes (like strings, numbers, booleans...
)

4) Write me an array with the names of your team and iterate over them, so all names will be printed out (using for each).

let team = ['John ','Paul ','George ','Ringo ']
result = ``

team.forEach(function(team) {
  result += `${team}`
})

console.log(result)



5) What is the difference between a loop and an array? Why would you use either of them?.
An array is a collection of data. A loop is a method to iterate over datatypes and can be used to iterate over a piece of code with the collection of data assembled in an array.


6) What is happening here?

var multiply = function(a, b) {
  return a * b;
};

multiply(2, 3)

a variable 'multiply' is declared with a function
that has two parameters called 'a' and 'b'
the content of the function is to return the result of 'a' times 'b'
in the final line a and b are defined by the numbers '2' and '3'

7) How could we log the arguments of the code above?
console.log, answer too obvious. 

8) What is ‘scope’?
Scope can be either global or local. Global scope sets variables for the entire code-file. Local scope is set between curly brackets ({...}) and values and variables declared locally only apply to what's between those brackets.

9) Can I use my vars at the following places?
You can always, but whether it will work and do anything is another question.

var name = Rembert

//Place A --> yes it will do something!

var codaisseur = function() {
  //Place B --> yes!
}
var codaisseur = function() {
  var name = Rembert
  //Place C --> no it will throwup an error because var name is already defined
}

//Place D --> yes!

10) Why would you use an object?
To create different classes called 'properties' for a certain defined variable.

11) Create an object ‘teacher', that stores the name, favorite language and a teach-function of that teacher that will alert you with some useful knowledge.
var teacher = {
 name: 'The Buddha',
 favLanguage: 'Sanskrit',
 wisdom:  function() {
    window.alert('Focus on the path, not the goal')}
}

console.log(teacher.name, teacher.favLanguage, teacher.wisdom)


12) What are the property-names and values of the object you just created?
property-names are 'name''favlanguage'and 'wisdom. Values are 'The Buddha', 'Sanskrit' and the function alert which opens a pop up window with an alert saying 'Focus on the path not the goal'


13) Why would you use git?
To collaborate
To have an external backup for your work
To share programs and pieces of code with the internet

14) What is the difference between git add,git commit and git push
git add readies a file for commit to remote git. git commit commits the selected files (using "git add") to the remote. git push can be used to upload files to a shared github space in the cloud.
for example you want to upload 'text.txt' to github. you first use git add to add it to git. than git commit to send the file to the remote and git push
to git push to push it to a shared channel.
